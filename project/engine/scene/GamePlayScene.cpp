#include "GamePlayScene.h"
#include<TextureManager.h>
#include<ModelManager.h>
#include<SpriteCommon.h>
#include<Object3dCommon.h>
#include<Input.h>
#include<ImGuiManager.h>
#include<SceneManager.h>
#include"ParticleManager.h"

void GamePlayScene::Finalize() {
}
void GamePlayScene::Initialize() {
    // テクスチャを読み込む
    TextureManager::GetInstance()->LoadTexture("Resources/uvChecker.png");
    TextureManager::GetInstance()->LoadTexture("Resources/monsterBall.png");
    TextureManager::GetInstance()->LoadTexture("Resources/circle.png");

    // .objファイルからモデルを読み込む
    ModelManager::GetInstance()->LoadModel("plane.obj");
    ModelManager::GetInstance()->LoadModel("fence.obj");
    // 変数に代入
    ModelPath01 = "plane.obj";

    transform_ = { { 1.0f, 1.0f, 1.0f }, { 0.0f, 3.0f, 0.0f }, { 0.0f,0.0f, 0.0f } };

#pragma region 最初のシーンの初期化

    // スプライトの初期化
    sprite = Sprite::Create("Resources/uvChecker.png", { 100.0f,100.0f }, 0.0f, { 360.0f,360.0f });


    // object3dの初期化
    object = Object3d::Create(ModelPath01, transform_);
    
    // パーティクル
    // モデル生成
    ParticleManager::GetInstance()->CreateParticles("Resources", ModelPath01);
    // パーティクルグループとテクスチャ生成
    ParticleManager::GetInstance()->CreateParticleGroup("Particles", "Resources/uvChecker.png");
    ////ParticleManager::GetInstance()->CreateParticleGroup("circles", "Resources/circle.png");

    emitter = new ParticleEmitter(       
        Vector3{ 0.0f, -0.5f, 0.0f }, // 位置
        3.0f,                         // 発生周期 or 寿命（自由に定義可能）
        0.0f,                         // 経過時間（基本は0から開始）
        10,                           // 発生数
        "Particles",                  // パーティクルグループ名
        Vector3{ 0.1f, 0.0f, 0.0f }  // ← 風
    );

    // 一度だけ発生させる（もしくは毎フレームUpdateで発生させてもOK）
    emitter->Emit();

#pragma endregion 最初のシーンの初期化
}

void GamePlayScene::Update() {
#pragma region  ImGuiの更新処理開始
    // デモウィンドウの表示
    //ImGui::ShowDemoWindow();

    sprite->DebugUpdate();
    object->DebugUpdate();

    ParticleManager::GetInstance()->DebugUpdata();
    
    if (ImGui::Button("Add Particles")) {
        emitter->Emit(); // ボタンが押された瞬間に1回だけEmit
    }
    static bool Emitfige = true;

    if (ImGui::Button("Emit Switching")) {
        Emitfige = !Emitfige;  // ボタンが押されたらON/OFFを切り替え
        Vector3 wind = Emitfige ? Vector3{ 0.01f, 0.0f, 0.0f } : Vector3{ 0.0f, 0.0f, 0.0f };

        delete emitter; // 前のエミッター削除（メモリリーク対策）
        emitter = new ParticleEmitter(
            Vector3{ 0.0f, -0.5f, 0.0f },
            3.0f,
            0.0f,
            10,
            "Particles",
            wind
        );
    }

    ImGui::Checkbox("Emit", &Emitfige);  // 状態表示用（任意）
#pragma endregion ImGuiの更新処理終了  

    /*-------------------------------------------------------------------------------------------------------*/
    /*-----------------------------------3Dオブジェクトの更新処理の開始------------------------------------------*/
    /*------------------------------------------------------------------------------------------------------*/

    if (Emitfige) { 
        emitter->Update();
    }

    // パーティクルの更新処理
    ParticleManager::GetInstance()->Update();

    object->Update();

    /*-------------------------------------------------------------------------------------------------------*/
    /*-----------------------------------3Dオブジェクトの更新処理の終了------------------------------------------*/
    /*------------------------------------------------------------------------------------------------------*/

    /*----------------------------------------------------------------------------------------------------*/
    /*---------------------------------------Spriteの更新処理----------------------------------------------*/
    /*---------------------------------------------------------------------------------------------------*/

    sprite->Update();

    /*----------------------------------------------------------------------------------------------------*/
    /*-------------------------------------Spriteの更新処理終了----------------------------------------------*/
    /*---------------------------------------------------------------------------------------------------*/
    // ImGuiの描画前準備
    ImGuiManager::GetInstance()->End();
}

void GamePlayScene::Draw() {
    /*------------------------------------------------------------------------------------------------------*/
    /*----------------------------------3Dオブジェクトの描画処理開始--------------------------------------------*/
    /*-----------------------------------------------------------------------------------------------------*/
    // 3Dオブジェクトの描画準備。3Dオブジェクトの描画に共通のグラフィックスコマンドを積む
    Object3dCommon::GetInstance()->Commondrawing();


    object->Draw();

    /*-------------------------------------------------------------------------------------------------------*/
    /*-------------------------------------パーティクルの更新処理の開始------------------------------------------*/
    /*------------------------------------------------------------------------------------------------------*/
    // パーティクルの描画準備。パーティクルの描画に共通のグラフィックスコマンドを積む
    ParticleManager::GetInstance()->Commondrawing();

    // パーティクルの描画処理  
    ParticleManager::GetInstance()->Draw();

    /*-------------------------------------------------------------------------------------------------------*/
    /*-------------------------------------パーティクルの更新処理の開始------------------------------------------*/
    /*------------------------------------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------------------------------------*/
    /*----------------------------------3Dオブジェクトの描画処理終了--------------------------------------------*/
    /*-----------------------------------------------------------------------------------------------------*/

    /*----------------------------------------------------------------------------------------------------*/
    /*------------------------------------Spriteの描画処理開始----------------------------------------------*/
    /*---------------------------------------------------------------------------------------------------*/
    // Spriteの描画準備。Spriteの描画に共通のグラフィックスコマンドを積む
    SpriteCommon::GetInstance()->Commondrawing();

    sprite->Draw();

    /*----------------------------------------------------------------------------------------------------*/
    /*------------------------------------Spriteの描画処理終了----------------------------------------------*/
    /*---------------------------------------------------------------------------------------------------*/
}